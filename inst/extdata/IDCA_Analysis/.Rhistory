summary(dbl.dens)
sce$DoubletScore <- dbl.dens
table(dbl.dens < 2)
sce_subset = sce[,dbl.dens > 1]
range(sce$DoubletScore)
colnames(sce)
length(which(colnames(sce) %in% setdiff(WhiteList_10X$V1, EA_WhiteList$cell)))
plotTSNE(sce, colour_by=I(log1p(scores)))
sce_subset = sce[,dbl.dens > 1.5]
range(sce_subset$DoubletScore)
length(which(colnames(sce_subset) %in% setdiff(WhiteList_10X$V1, EA_WhiteList$cell)))
table(dbl.dens < 2)
matrix_dir = '/Users/isar/Downloads/10X-aggregate/DAK9853A5/objects/raw_matrix/'
library(DropletUtils)
scRNAseq <- read10xCounts(path)
matrix_dir = '/Users/isar/Downloads/10X-aggregate/DAK9853A6/objects/raw_matrix/'
library(DropletUtils)
scRNAseq <- read10xCounts(path)
matrix_dir = '/Users/isar/Downloads/10X-aggregate/DAK9853A5/objects/raw_matrix/'
library(DropletUtils)
scRNAseq <- read10xCounts(path)
matrix_dir = '/Users/isar/Downloads/10X-aggregate/DAK9853A5/objects/raw_matrix/'
library(DropletUtils)
scRNAseq <- read10xCounts(path)
library(data.table)
DIR = dirname(rstudioapi::getActiveDocumentContext()$path)
#--------
metaData = fread(paste0(DIR,'/samples.metadata'), stringsAsFactors = F, header = T)
#-------- revised the header
colnames(metaData) = c('ProjectNumber', 'LIMSID', 'Sample', 'Name', 'IndexLibrary', 'TypeGenome', 'FlowcellID', 'LaneNumber', 'SequencingID')
library(stringr)
#--- I remove the numbers which are meaningless
library(stringr)
metaData$Sample = str_split_fixed(metaData$Sample, "_", 2)[,2]
metaData$Sample = str_replace(gsub('_.*', '', metaData$Sample), "^0+" ,"")
#--- CHECK THIS
metaData$Sample
View(metaData)
library(data.table)
# I assume you have one GEX profile per project, and unique LIMS-ID per a Gex and ATACs
DIR = dirname(rstudioapi::getActiveDocumentContext()$path)
#--------
metaData = fread(paste0(DIR,'/samples.metadata'), stringsAsFactors = F, header = T)
#-------- revised the header
colnames(metaData) = c('ProjectNumber', 'LIMSID', 'Sample', 'Name', 'IndexLibrary', 'TypeGenome', 'FlowcellID', 'LaneNumber', 'SequencingID')
# metaData = metaData[order(metaData$Sample,decreasing = F),]
#-------- revised the sample name [data dependent]
# metaData$Sample = gsub('.*_', '', stringr::str_extract(metaData$Sample, "[^_]*_[^_]*_[^_]*"))
library(stringr)
View(metaData)
str_split_fixed(metaData$Sample, "_", 2)[,2]
str_split_fixed(metaData$Sample, "_", 3)
str_split_fixed(metaData$Sample, "_", 3)[,3]
metaData$Sample = str_split_fixed(metaData$Sample, "_", 3)[,3]
str_replace(gsub('_.*', '', metaData$Sample), "^0+" ,"")
metaData$Sample = str_replace(gsub('_.*', '', metaData$Sample), "^0+" ,"")
#--- CHECK THIS
metaData$Sample
#-------- genome
Genome = 'GRCh38' # 'mm10'
GenomePath = paste0('/well/htseq/Genomes/refdata-cellranger-arc-2.0.0/refdata-cellranger-arc-',Genome,'-2020-A-2.0.0')
#-------- GEX
metaData$IndexLibrary = gsub('10X SC ', '', metaData$IndexLibrary)
GEX = metaData[which(metaData$IndexLibrary == 'mxRNA'),]
GEX = GEX[order(GEX$Sample, decreasing = F),]
View(GEX)
#-------- ATAC
ATAC = metaData[which(metaData$IndexLibrary == 'mxATAC'),]
samples = unique(metaData$Sample)
sample.arc = vector()
i=1
for(i in samples)
{
print(i)
ATAC_selected = ATAC[which(ATAC$Sample == i),]
ATAC_selected_cat1 = gsub(" ", ",",capture.output(cat(paste0('/well/singlecell/', ATAC_selected$ProjectNumber, '/10X-mkfastq/', ATAC_selected$FlowcellID,'/', ATAC_selected$SequencingID))))
ATAC_selected_cat2 = gsub(" ", ",",capture.output(cat(ATAC_selected$SequencingID)))
GEX_selected = GEX[which(GEX$Sample == i),]
GEX_selected_cat1 = gsub(" ", ",",capture.output(cat(paste0('/well/singlecell/', GEX_selected$ProjectNumber, '/10X-mkfastq/', GEX_selected$FlowcellID,'/', GEX_selected$SequencingID))))
GEX_selected_cat2 = gsub(" ", ",",capture.output(cat(GEX_selected$SequencingID)))
sample.arc[i] = paste( paste0('Sample',i),
unique(GEX_selected$ProjectNumber),
GenomePath,
GEX_selected_cat1,
ATAC_selected_cat1,
paste0('/well/singlecell/',unique(GEX_selected$ProjectNumber),'/10X-arc'),
paste0(unique(GEX_selected$ProjectNumber), '-GEX,', unique(GEX_selected$LIMSID), ':', GEX_selected_cat2, ';ATAC,', unique(ATAC_selected$LIMSID), ':', ATAC_selected_cat2) )
}
class(sample.arc)
getwd()
write.table(sample.arc, paste0(DIR, '/samples.arc'), quote = F, row.names = F, sep = '\t', col.names = F)
View(ATAC_selected)
ATAC
samples = unique(metaData$Sample)
sample.arc = vector()
i=1
for(i in samples)
{
print(i)
ATAC_selected = ATAC[which(ATAC$Sample == i),]
ATAC_selected_cat1 = gsub(" ", ",",capture.output(cat(paste0('/well/singlecell/', ATAC_selected$ProjectNumber, '/10X-mkfastq/', ATAC_selected$FlowcellID,'/', ATAC_selected$SequencingID))))
ATAC_selected_cat2 = gsub(" ", ",",capture.output(cat(ATAC_selected$SequencingID)))
GEX_selected = GEX[which(GEX$Sample == i),]
GEX_selected_cat1 = gsub(" ", ",",capture.output(cat(paste0('/well/singlecell/', GEX_selected$ProjectNumber, '/10X-mkfastq/', GEX_selected$FlowcellID,'/', GEX_selected$SequencingID))))
GEX_selected_cat2 = gsub(" ", ",",capture.output(cat(GEX_selected$SequencingID)))
sample.arc[i] = paste( paste0('Sample',i),
unique(GEX_selected$ProjectNumber),
GenomePath,
GEX_selected_cat1,
ATAC_selected_cat1,
paste0('/well/singlecell/',unique(GEX_selected$ProjectNumber),'/10X-arc'),
paste0(unique(GEX_selected$ProjectNumber), '-GEX,', unique(GEX_selected$LIMSID), ':', GEX_selected_cat2, ';ATAC,', unique(ATAC_selected$LIMSID), ':', ATAC_selected_cat2) )
}
class(sample.arc)
getwd()
write.table(sample.arc, paste0(DIR, '/samples.arc'), quote = F, row.names = F, sep = '\t', col.names = F)
samples = unique(metaData$Sample)
sample.arc = vector()
i=1
for(i in samples)
{
print(i)
ATAC_selected = ATAC[which(ATAC$Sample == i),]
ATAC_selected_cat1 = gsub(" ", ",",capture.output(cat(paste0('/well/singlecell/', ATAC_selected$ProjectNumber, '/10X-mkfastq/', ATAC_selected$FlowcellID,'/', ATAC_selected$SequencingID))))
ATAC_selected_cat2 = gsub(" ", ",",capture.output(cat(ATAC_selected$SequencingID)))
GEX_selected = GEX[which(GEX$Sample == i),]
GEX_selected_cat1 = gsub(" ", ",",capture.output(cat(paste0('/well/singlecell/', GEX_selected$ProjectNumber, '/10X-mkfastq/', GEX_selected$FlowcellID,'/', GEX_selected$SequencingID))))
GEX_selected_cat2 = gsub(" ", ",",capture.output(cat(GEX_selected$SequencingID)))
sample.arc[i] = paste( paste0('Sample',i),
unique(GEX_selected$ProjectNumber),
GenomePath,
GEX_selected_cat1,
ATAC_selected_cat1,
paste0('/well/singlecell/',unique(GEX_selected$ProjectNumber),'/10X-arc'),
paste0(unique(GEX_selected$ProjectNumber), '-GEX,', unique(GEX_selected$LIMSID), ':', GEX_selected_cat2, ';ATAC,', unique(ATAC_selected$LIMSID), ':', ATAC_selected_cat2) )
}
class(sample.arc)
getwd()
sample.arc
getwd()
DIR
paste0(DIR, '/samples.arc')
write.table(sample.arc, paste0(DIR, '/samples.arc'), quote = F, row.names = F, sep = '\t', col.names = F)
print(i)
i
ATAC$Sample
which(ATAC$Sample == i)
ATAC_selected = ATAC[which(ATAC$Sample == i),]
ATAC_selected
ATAC_selected_cat1 = gsub(" ", ",",capture.output(cat(paste0('/well/singlecell/', ATAC_selected$ProjectNumber, '/10X-mkfastq/', ATAC_selected$FlowcellID,'/', ATAC_selected$SequencingID))))
ATAC_selected_cat2 = gsub(" ", ",",capture.output(cat(ATAC_selected$SequencingID)))
ATAC_selected_cat1
ATAC_selected_cat2
GEX_selected = GEX[which(GEX$Sample == i),]
GEX_selected_cat1 = gsub(" ", ",",capture.output(cat(paste0('/well/singlecell/', GEX_selected$ProjectNumber, '/10X-mkfastq/', GEX_selected$FlowcellID,'/', GEX_selected$SequencingID))))
GEX_selected_cat2 = gsub(" ", ",",capture.output(cat(GEX_selected$SequencingID)))
GEX_selected_cat2
which(GEX$Sample == i)
GEX$Sample
i
samples
library(data.table)
# I assume you have one GEX profile per project, and unique LIMS-ID per a Gex and ATACs
DIR = dirname(rstudioapi::getActiveDocumentContext()$path)
#--------
metaData = fread(paste0(DIR,'/samples.metadata'), stringsAsFactors = F, header = T)
#-------- revised the header
colnames(metaData) = c('ProjectNumber', 'LIMSID', 'Sample', 'Name', 'IndexLibrary', 'TypeGenome', 'FlowcellID', 'LaneNumber', 'SequencingID')
View(metaData)
str_split_fixed(metaData$Sample, "_", 3)
# metaData$Sample = gsub('.*_', '', stringr::str_extract(metaData$Sample, "[^_]*_[^_]*_[^_]*"))
library(stringr)
#--- I remove the numbers which are meaningless
library(stringr)
metaData$Sample = str_split_fixed(metaData$Sample, "_", 3)[,1]
metaData$Sample = str_replace(gsub('_.*', '', metaData$Sample), "^0+" ,"")
#--- CHECK THIS
metaData$Sample
#-------- genome
Genome = 'GRCh38' # 'mm10'
GenomePath = paste0('/well/htseq/Genomes/refdata-cellranger-arc-2.0.0/refdata-cellranger-arc-',Genome,'-2020-A-2.0.0')
#-------- GEX
metaData$IndexLibrary = gsub('10X SC ', '', metaData$IndexLibrary)
GEX = metaData[which(metaData$IndexLibrary == 'mxRNA'),]
GEX = GEX[order(GEX$Sample, decreasing = F),]
#-------- ATAC
ATAC = metaData[which(metaData$IndexLibrary == 'mxATAC'),]
samples = unique(metaData$Sample)
sample.arc = vector()
i=1
for(i in samples)
{
print(i)
ATAC_selected = ATAC[which(ATAC$Sample == i),]
ATAC_selected_cat1 = gsub(" ", ",",capture.output(cat(paste0('/well/singlecell/', ATAC_selected$ProjectNumber, '/10X-mkfastq/', ATAC_selected$FlowcellID,'/', ATAC_selected$SequencingID))))
ATAC_selected_cat2 = gsub(" ", ",",capture.output(cat(ATAC_selected$SequencingID)))
GEX_selected = GEX[which(GEX$Sample == i),]
GEX_selected_cat1 = gsub(" ", ",",capture.output(cat(paste0('/well/singlecell/', GEX_selected$ProjectNumber, '/10X-mkfastq/', GEX_selected$FlowcellID,'/', GEX_selected$SequencingID))))
GEX_selected_cat2 = gsub(" ", ",",capture.output(cat(GEX_selected$SequencingID)))
sample.arc[i] = paste( paste0('Sample',i),
unique(GEX_selected$ProjectNumber),
GenomePath,
GEX_selected_cat1,
ATAC_selected_cat1,
paste0('/well/singlecell/',unique(GEX_selected$ProjectNumber),'/10X-arc'),
paste0(unique(GEX_selected$ProjectNumber), '-GEX,', unique(GEX_selected$LIMSID), ':', GEX_selected_cat2, ';ATAC,', unique(ATAC_selected$LIMSID), ':', ATAC_selected_cat2) )
}
class(sample.arc)
getwd()
write.table(sample.arc, paste0(DIR, '/samples.arc'), quote = F, row.names = F, sep = '\t', col.names = F)
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
library(R.utils)
copyDirectory("Inputs", to="Outputs/Inputs", recursive=TRUE)
library(data.table)
library(dplyr)
library(glmnet)
library(flexmix)
library(mvtnorm)
library(stringr)
#---------------
path=paste0('/Users/isar/Downloads/')
#---------------
listfiles = list.files(path, pattern = '_AllCells.txt')
dir.create(paste0('Expression_Aware_Cell_Assignment'), recursive = T)
for (S in 1:length(listfiles))
{
S0 = gsub('_AllCells.txt','',listfiles[S])
sp = str_split_fixed(S0, "_", 3)
sp
S1=sp[1,1]
S2=sp[1,2]
FC=sp[1,3]
#========================================== read inputs
estimate = fread(paste0(path, listfiles[S]), stringsAsFactors = F, header = T)
estimate = as.data.frame(estimate)
row.names(estimate) = make.names(estimate$GeneID, unique = T)
estimate = estimate[,-c(1)]
estimate[1:5,1:5]
dim(estimate)
colnames(estimate) = gsub('.1', '-1', colnames(estimate))
colnames(estimate)[1:5]
#========================================== pair of donors per FC
getwd()
# for Extension_is = FALSE - check to see if you have any input
if(file.exists(paste0('/well/singlecell/',PI,'/10X-Expression_Informed_Demultiplex/DCOX_Plots/',S0,'_merged.txt')))
{
merged_Pair = fread( paste0(path, '/DCOX_Analysis/DCOX_Plots/',S0,'_merged.txt'), stringsAsFactors = F, header = T)
merged_Pair = merged_Pair[order(-as.numeric(merged_Pair$TPrate), merged_Pair$pValDiff_adj),]
head(merged_Pair)
#==========================================
vireo = fread(paste0(path,'/donor_ids.tsv'), stringsAsFactors = F, header = T)
vireo = as.data.frame(vireo)
colnames(vireo)[1] = 'BARCODE'
#========================================== clustering
Gene1=merged_Pair$Gene2[1] # in RESULT_merged, Gene2 is the original Gene1
Gene2=merged_Pair$Gene1[1]
estimate_Gene1 = estimate[which(row.names(estimate) == Gene1),]
estimate_Gene2 = estimate[which(row.names(estimate) == Gene2),]
#----------
input_mixture_model = t(rbind(as.matrix(estimate_Gene1), as.matrix(estimate_Gene2)))
input_mixture_model = as.data.frame(input_mixture_model, stringsAsFactors = F)
mixed_model = flexmix(cbind(as.numeric(input_mixture_model[,1]),as.numeric(input_mixture_model[,2]))~1,
k=2, data=input_mixture_model,
model = FLXMCmvnorm(diag = T), #diag = T to get fix results FLXMCmvpois(), FLXMCmvnorm
control = list(tolerance = 1e-15, iter.max = 1000))
#--------------------------- assignments comparison
input_mixture_model$predicted_clusters = clusters(mixed_model)
identical(row.names(input_mixture_model), colnames(estimate))
input_mixture_model$BARCODE = row.names(input_mixture_model)
merged = merge(input_mixture_model, vireo, by = 'BARCODE')
if(length(unique((input_mixture_model$predicted_clusters))) > 1)
{
freq_c1 = data.frame(table(merged[which(merged$predicted_clusters == 1), "best_singlet"]), stringsAsFactors = F)
freq_c1 = freq_c1[order(freq_c1$Freq, decreasing = T),]
freq_c1
merged[which(merged$predicted_clusters == 1),"predicted_clusters"] = as.character(freq_c1$Var1[1])
freq_c2 = data.frame(table(merged[which(merged$predicted_clusters == 2),"best_singlet"]), stringsAsFactors = F)
freq_c2 = freq_c2[order(freq_c2$Freq, decreasing = T),]
freq_c2
merged[which(merged$predicted_clusters == 2),"predicted_clusters"] = as.character(freq_c2$Var1[1])
print(table(merged$donor_id))
print(table(merged$predicted_clusters))
print(table(merged$donor_id == merged$predicted_clusters))
merged$Donor1=rep(S1, dim(merged)[1])
merged$Donor2=rep(S2, dim(merged)[1])
merged$FC=rep(FC, dim(merged)[1])
fwrite(merged, paste0('Expression_Aware_Cell_Assignment/', FC, '_', S1, '_', S2, '_Expression_Aware_Cell_Assignment.txt'), row.names = F, quote = F, sep = '\t')
print(S)
}else{print(paste0(S," had one predicted cluster."))}
}
}
path=paste0('/Users/isar/Downloads/')
#---------------
listfiles = list.files(path, pattern = '_AllCells.txt')
dir.create(paste0('DCOX_Analysis/Expression_Aware_Cell_Assignment'), recursive = T)
S=1
S0 = gsub('_AllCells.txt','',listfiles[S])
listfiles
sp = str_split_fixed(S0, "_", 3)
sp
S1=sp[1,1]
S2=sp[1,2]
FC=sp[1,3]
estimate = fread(paste0(path, listfiles[S]), stringsAsFactors = F, header = T)
estimate = as.data.frame(estimate)
row.names(estimate) = make.names(estimate$GeneID, unique = T)
estimate = estimate[,-c(1)]
estimate[1:5,1:5]
dim(estimate)
colnames(estimate) = gsub('.1', '-1', colnames(estimate))
colnames(estimate)[1:5]
#========================================== pair of donors per FC
getwd()
paste0('10X-Expression_Informed_Demultiplex/DCOX_Plots/',S0,'_merged.txt')
file.exists(paste0('10X-Expression_Informed_Demultiplex/DCOX_Plots/',S0,'_merged.txt'))
S0
file.exists(paste0(path, '10X-Expression_Informed_Demultiplex/DCOX_Plots/',S0,'_merged.txt'))
file.exists(paste0(path, '10X-Expression_Informed_Demultiplex/DCOX_Plots/',S0,'_merged.txt'))
paste0(path, '10X-Expression_Informed_Demultiplex/DCOX_Plots/',S0,'_merged.txt')
file.exists(paste0(path, '10X-DCOX_Analysis/DCOX_Plots/',S0,'_merged.txt'))
file.exists(paste0(path, 'DCOX_Analysis/DCOX_Plots/',S0,'_merged.txt'))
merged_Pair = fread( paste0(path, '/DCOX_Analysis/DCOX_Plots/',S0,'_merged.txt'), stringsAsFactors = F, header = T)
merged_Pair = merged_Pair[order(-as.numeric(merged_Pair$TPrate), merged_Pair$pValDiff_adj),]
head(merged_Pair)
#==========================================
vireo = fread(paste0(path,'/donor_ids.tsv'), stringsAsFactors = F, header = T)
vireo = as.data.frame(vireo)
colnames(vireo)[1] = 'BARCODE'
#========================================== clustering
Gene1=merged_Pair$Gene2[1] # in RESULT_merged, Gene2 is the original Gene1
Gene2=merged_Pair$Gene1[1]
estimate_Gene1 = estimate[which(row.names(estimate) == Gene1),]
estimate_Gene2 = estimate[which(row.names(estimate) == Gene2),]
#----------
input_mixture_model = t(rbind(as.matrix(estimate_Gene1), as.matrix(estimate_Gene2)))
input_mixture_model = as.data.frame(input_mixture_model, stringsAsFactors = F)
mixed_model = flexmix(cbind(as.numeric(input_mixture_model[,1]),as.numeric(input_mixture_model[,2]))~1,
k=2, data=input_mixture_model,
model = FLXMCmvnorm(diag = T), #diag = T to get fix results FLXMCmvpois(), FLXMCmvnorm
control = list(tolerance = 1e-15, iter.max = 1000))
#--------------------------- assignments comparison
input_mixture_model$predicted_clusters = clusters(mixed_model)
identical(row.names(input_mixture_model), colnames(estimate))
input_mixture_model$BARCODE = row.names(input_mixture_model)
merged = merge(input_mixture_model, vireo, by = 'BARCODE')
freq_c1 = data.frame(table(merged[which(merged$predicted_clusters == 1), "best_singlet"]), stringsAsFactors = F)
freq_c1 = freq_c1[order(freq_c1$Freq, decreasing = T),]
freq_c1
merged[which(merged$predicted_clusters == 1),"predicted_clusters"] = as.character(freq_c1$Var1[1])
freq_c2 = data.frame(table(merged[which(merged$predicted_clusters == 2),"best_singlet"]), stringsAsFactors = F)
freq_c2 = freq_c2[order(freq_c2$Freq, decreasing = T),]
freq_c2
merged[which(merged$predicted_clusters == 2),"predicted_clusters"] = as.character(freq_c2$Var1[1])
print(table(merged$donor_id))
print(table(merged$predicted_clusters))
print(table(merged$donor_id == merged$predicted_clusters))
merged$Donor1=rep(S1, dim(merged)[1])
merged$Donor2=rep(S2, dim(merged)[1])
merged$FC=rep(FC, dim(merged)[1])
fwrite(merged, paste0('Expression_Aware_Cell_Assignment/', FC, '_', S1, '_', S2, '_Expression_Aware_Cell_Assignment.txt'), row.names = F, quote = F, sep = '\t')
print(S)
library(data.table)
library(dplyr)
library(glmnet)
library(flexmix)
library(mvtnorm)
library(stringr)
#---------------
path=paste0('/Users/isar/Downloads/')
#---------------
listfiles = list.files(path, pattern = '_AllCells.txt')
dir.create(paste0('DCOX_Analysis/Expression_Aware_Cell_Assignment'), recursive = T)
for (S in 1:length(listfiles))
{
S0 = gsub('_AllCells.txt','',listfiles[S])
sp = str_split_fixed(S0, "_", 3)
sp
S1=sp[1,1]
S2=sp[1,2]
FC=sp[1,3]
#========================================== read inputs
estimate = fread(paste0(path, listfiles[S]), stringsAsFactors = F, header = T)
estimate = as.data.frame(estimate)
row.names(estimate) = make.names(estimate$GeneID, unique = T)
estimate = estimate[,-c(1)]
colnames(estimate) = gsub('.1', '-1', colnames(estimate))
#========================================== pair of donors per FC
# for Extension_is = FALSE - check to see if you have any input
if(file.exists(paste0(path, 'DCOX_Analysis/DCOX_Plots/',S0,'_merged.txt')))
{
merged_Pair = fread( paste0(path, '/DCOX_Analysis/DCOX_Plots/',S0,'_merged.txt'), stringsAsFactors = F, header = T)
merged_Pair = merged_Pair[order(-as.numeric(merged_Pair$TPrate), merged_Pair$pValDiff_adj),]
head(merged_Pair)
#==========================================
vireo = fread(paste0(path,'/donor_ids.tsv'), stringsAsFactors = F, header = T)
vireo = as.data.frame(vireo)
colnames(vireo)[1] = 'BARCODE'
#========================================== clustering
Gene1=merged_Pair$Gene2[1] # in RESULT_merged, Gene2 is the original Gene1
Gene2=merged_Pair$Gene1[1]
estimate_Gene1 = estimate[which(row.names(estimate) == Gene1),]
estimate_Gene2 = estimate[which(row.names(estimate) == Gene2),]
#----------
input_mixture_model = t(rbind(as.matrix(estimate_Gene1), as.matrix(estimate_Gene2)))
input_mixture_model = as.data.frame(input_mixture_model, stringsAsFactors = F)
mixed_model = flexmix(cbind(as.numeric(input_mixture_model[,1]),as.numeric(input_mixture_model[,2]))~1,
k=2, data=input_mixture_model,
model = FLXMCmvnorm(diag = T), #diag = T to get fix results FLXMCmvpois(), FLXMCmvnorm
control = list(tolerance = 1e-15, iter.max = 1000))
#--------------------------- assignments comparison
input_mixture_model$predicted_clusters = clusters(mixed_model)
identical(row.names(input_mixture_model), colnames(estimate))
input_mixture_model$BARCODE = row.names(input_mixture_model)
merged = merge(input_mixture_model, vireo, by = 'BARCODE')
if(length(unique((input_mixture_model$predicted_clusters))) > 1)
{
freq_c1 = data.frame(table(merged[which(merged$predicted_clusters == 1), "best_singlet"]), stringsAsFactors = F)
freq_c1 = freq_c1[order(freq_c1$Freq, decreasing = T),]
freq_c1
merged[which(merged$predicted_clusters == 1),"predicted_clusters"] = as.character(freq_c1$Var1[1])
freq_c2 = data.frame(table(merged[which(merged$predicted_clusters == 2),"best_singlet"]), stringsAsFactors = F)
freq_c2 = freq_c2[order(freq_c2$Freq, decreasing = T),]
freq_c2
merged[which(merged$predicted_clusters == 2),"predicted_clusters"] = as.character(freq_c2$Var1[1])
print(table(merged$donor_id))
print(table(merged$predicted_clusters))
print(table(merged$donor_id == merged$predicted_clusters))
merged$Donor1=rep(S1, dim(merged)[1])
merged$Donor2=rep(S2, dim(merged)[1])
merged$FC=rep(FC, dim(merged)[1])
fwrite(merged, paste0('Expression_Aware_Cell_Assignment/', FC, '_', S1, '_', S2, '_Expression_Aware_Cell_Assignment.txt'), row.names = F, quote = F, sep = '\t')
print(S)
}else{print(paste0(S," had one predicted cluster."))}
}
}
print(table(merged$donor_id))
print(table(merged$predicted_clusters))
library(data.table)
library(stringr)
library(ggplot2)
IDCAvis <- NULL
IDCAvis <- function( InputDir )
{
#---------------------------------- find and read input file(s)
setwd(InputDir)
listfiles = list.files(paste0(InputDir, 'IDCA_Analysis/'), pattern = '_IDCA.txt')
Pairs = unique(gsub('-.*', '', listfiles))
for (i in 1:length(Pairs))
{
listfiles_Pair = list.files(paste0(InputDir, 'IDCA_Analysis/'), pattern = "Pairs[i]|.txt")
setwd(paste0(InputDir, 'IDCA_Analysis/'))
merged_Pair = rbindlist(lapply(listfiles_Pair, fread))
merged_Pair = as.data.frame(merged_Pair)
merged_Pair = merged_Pair[order(-as.numeric(merged_Pair$TPrate), merged_Pair$pValDiff_adj),]
dir.create('IDCA_Plots/')
fwrite(merged_Pair, paste0('IDCA_Plots/', Pairs[i],'_merged.txt'), quote = F, row.names = F, sep = '\t')
#---------------------------------- read in gene expression profile
estimate = fread(paste0(InputDir, '/SAVER/', Pairs[i], '_AssignedCells.txt'), stringsAsFactors = F, header = T)
estimate = as.data.frame(estimate)
row.names(estimate) = make.names(estimate$GeneID, unique = T)
estimate = estimate[,-c(1)]
#----------------------------------
#---------------------------------- generate names for outputs
S0 = gsub('_AssignedCells.txt','',Pairs[i])
sp = str_split_fixed(S0, "_", 3)
S1=sp[1,1]
S2=sp[1,2]
FC=sp[1,3]
#----------------------------------
#---------------------------------- read in the results of genetic demultiplexing (vireo)
vireo = fread(paste0(InputDir, 'donor_ids.tsv'), stringsAsFactors = F, header = T)
vireo = as.data.frame(vireo)
colnames(vireo)[1] = 'BARCODE'
S1_BARCODE = vireo[which(vireo$donor_id == S1),'BARCODE']
S2_BARCODE = vireo[which(vireo$donor_id == S2),'BARCODE']
S1_BARCODE = gsub('-', '.', S1_BARCODE)
S2_BARCODE = gsub('-', '.', S2_BARCODE)
#----------------------------------
#---------------------------------- subset the gene expression profile
estimate = estimate[,which(colnames(estimate) %in% c(S1_BARCODE, S2_BARCODE))]
#----------------------------------
#---------------------------------- visualization
Gene1=merged_Pair$Gene2[1] # in RESULT_merged, Gene2 is the original Gene1
Gene2=merged_Pair$Gene1[1]
estimate_Gene1 = estimate[which(row.names(estimate) == Gene1),]
estimate_Gene2 = estimate[which(row.names(estimate) == Gene2),]
input = t(rbind(as.matrix(estimate_Gene1), as.matrix(estimate_Gene2)))
input = as.data.frame(input, stringsAsFactors = F)
input$real_clusters = colnames(estimate)
input$real_clusters[which(input$real_clusters%in%S1_BARCODE)]=1
input$real_clusters[which(input$real_clusters%in%S2_BARCODE)]=2
S1=unique(input$real_clusters)[1]
S2=unique(input$real_clusters)[2]
expr0=data.frame(Gene1=as.numeric(input[which(input[,'real_clusters']==S1),1]),Gene2=as.numeric(input[which(input[,'real_clusters']==S1),2]) )
expr1=data.frame(Gene1=as.numeric(input[which(input[,'real_clusters']==S2),1]),Gene2=as.numeric(input[which(input[,'real_clusters']==S2),2]) )
expr0$Sample = rep(paste0('Sample-0'), dim(expr0)[1])
expr1$Sample = rep(paste0('Sample-1'), dim(expr1)[1])
input.plot = do.call(rbind,list(expr0,expr1))
input.plot$Sample = factor(input.plot$Sample, levels = unique(input.plot$Sample))
theme_set(theme_bw())
g=ggplot(input.plot, aes( Gene1,Gene2))+labs(subtitle="Sample-specific correlation for expresseion values",title="", x = Gene1, y = Gene2)
p=g+geom_jitter(aes(col=Sample,size=Gene1))+geom_smooth(aes(col=Sample),method="lm",se=F)+scale_color_manual(values=c("#999999","#E69F00","#56B4E9"))+geom_rug(aes(color=Sample))+theme(axis.text=element_text(size=20),axis.title=element_text(size=20),plot.subtitle=element_text(size=20),legend.title=element_text(size=20),legend.text=element_text(size=18))
#---------------------------------- save the image
pdf(file=paste0(paste0(InputDir, 'IDCA_Analysis/IDCA_Plots/'), Gene1, '_', Gene2,'-', Pairs[i], "_RealCluster_correlationplot.pdf"), width = 15, height = 10, useDingbats = F)
print(p)
dev.off()
#----------------------------------
}
}
InputDir='/Users/isar/Documents/Expression_aware_demultiplexing/Inputs/'
IDCAvis( InputDir )
